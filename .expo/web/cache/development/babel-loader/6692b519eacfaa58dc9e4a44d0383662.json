{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/sachi/Desktop/Mobile App/application/screens/Comment.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Text, TextInput, Title, Button, Avatar, List, Checkbox } from 'react-native-paper';\nimport Styles from \"../config/Styles\";\nimport { submitComment } from \"../config/DataApp\";\nimport ColorsApp from \"../config/ColorsApp\";\nimport Strings from \"../config/Strings\";\nimport Icon from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport UserContext from \"../context/UserContext\";\nexport default function Comment(props) {\n  var route = props.route;\n  var navigation = props.navigation;\n  var _route$params = route.params,\n      id = _route$params.id,\n      action = _route$params.action,\n      comment = _route$params.comment;\n  var contextState = useContext(UserContext);\n  var userInfo = contextState.user;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      body = _useState4[0],\n      setBody = _useState4[1];\n\n  var onChangeScreen = function onChangeScreen(screen) {\n    props.navigation.navigate(screen);\n  };\n\n  var goBack = function goBack() {\n    props.navigation.goBack();\n  };\n\n  var postComment = function postComment() {\n    return _regeneratorRuntime.async(function postComment$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n\n            if (id, body, userInfo, action) {\n              console.log(id, body, userInfo.user_id, action);\n              submitComment(id, userInfo.user_id, action, body, comment).then(function (response) {\n                if (response === 'submitted') {\n                  setLoading(false);\n                  goBack();\n                } else {\n                  setLoading(false);\n                  Alert.alert(Strings.ST104, Strings.ST32);\n                }\n              });\n            } else {\n              setLoading(false);\n              Alert.alert(Strings.ST104, Strings.ST33);\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: Styles.CommentsScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, {\n    placeholder: Strings.ST103,\n    onChangeText: function onChangeText(text) {\n      return setBody(text);\n    },\n    value: body,\n    multiline: true,\n    mode: \"flat\",\n    autoCapitalize: \"none\",\n    style: Styles.textArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }), React.createElement(Button, {\n    mode: \"contained\",\n    onPress: function onPress() {\n      return postComment();\n    },\n    style: Styles.AuthButton,\n    contentStyle: Styles.AuthButtonContent,\n    labelStyle: Styles.AuthButtonLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, !loading ? Strings.ST96 : Strings.ST31))));\n}","map":{"version":3,"sources":["/Users/sachi/Desktop/Mobile App/application/screens/Comment.js"],"names":["React","useState","useContext","Text","TextInput","Title","Button","Avatar","List","Checkbox","Styles","submitComment","ColorsApp","Strings","Icon","UserContext","Comment","props","route","navigation","params","id","action","comment","contextState","userInfo","user","loading","setLoading","body","setBody","onChangeScreen","screen","navigate","goBack","postComment","console","log","user_id","then","response","Alert","alert","ST104","ST32","ST33","CommentsScreen","ST103","text","textArea","AuthButton","AuthButtonContent","AuthButtonLabel","ST96","ST31"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { SafeAreaView, View, Alert, Image, ScrollView, TouchableOpacity } from 'react-native';\nimport { Text, TextInput, Title, Button, Avatar, List, Checkbox } from 'react-native-paper';\nimport Styles from '../config/Styles';\nimport { submitComment } from \"../config/DataApp\";\nimport ColorsApp from '../config/ColorsApp';\nimport Strings from '../config/Strings';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport UserContext from '../context/UserContext';\n\nexport default function Comment(props) {\n\n  const { route } = props;\n  const { navigation } = props;\n  const { id, action, comment } = route.params;\n\n  const contextState = useContext(UserContext);\n  const userInfo = contextState.user;\n\n  const [loading, setLoading] = useState(false);\n  const [body, setBody] = useState('');\n\n  const onChangeScreen = (screen) => {\n    props.navigation.navigate(screen);\n  };\n\n  const goBack = () => {\n    props.navigation.goBack();\n  };\n\n  const postComment = async () => {\n\n    setLoading(true);\n\n    if (id, body, userInfo, action) {\n\n      console.log(id, body, userInfo.user_id, action);\n\n      submitComment(id, userInfo.user_id, action, body, comment).then(response => {\n\n        if (response === 'submitted') {\n\n          setLoading(false);\n\n          goBack();\n\n        }else{\n\n          setLoading(false);\n          Alert.alert(Strings.ST104, Strings.ST32);\n\n        }\n      });\n\n    }else{\n      setLoading(false);\n      Alert.alert(Strings.ST104, Strings.ST33);\n    }\n  }\n\n  return (\n\n    <SafeAreaView>\n    <ScrollView showsHorizontalScrollIndicator={false} showsVerticalScrollIndicator={false}>\n\n    <View style={Styles.CommentsScreen}>\n\n    <TextInput\n    placeholder={Strings.ST103}\n    onChangeText={text => setBody(text)}\n    value={body} multiline={true}\n    mode=\"flat\"\n    autoCapitalize=\"none\"\n    style={Styles.textArea} />\n\n    <Button mode=\"contained\" onPress={()=> postComment()} style={Styles.AuthButton} contentStyle={Styles.AuthButtonContent} labelStyle={Styles.AuthButtonLabel}>\n    {!loading ? Strings.ST96 : Strings.ST31}\n    </Button>\n\n    </View>\n    </ScrollView>\n    </SafeAreaView>\n\n    );\n}\n"]},"metadata":{},"sourceType":"module"}