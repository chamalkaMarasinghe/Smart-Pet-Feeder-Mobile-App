{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/sachi/Desktop/Mobile App/application/screens/ForgotPass.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { TextInput, Button, Text } from 'react-native-paper';\nimport Styles from \"../config/Styles\";\nimport { restPassApi } from \"../config/DataApp\";\nimport Strings from \"../config/Strings\";\nexport default function ForgotPass(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var onChangeScreen = function onChangeScreen(screen) {\n    props.navigation.navigate(screen);\n  };\n\n  var login = function login() {\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n\n            if (email) {\n              restPassApi(email).then(function (response) {\n                if (response === 'success') {\n                  setLoading(false);\n                  Alert.alert(Strings.ST38, Strings.ST39, [{\n                    text: Strings.ST76,\n                    onPress: function onPress() {\n                      return onChangeScreen('login');\n                    }\n                  }], {\n                    cancelable: false\n                  });\n                } else if (response === 'email-not-exist') {\n                  setLoading(false);\n                  Alert.alert(Strings.ST104, Strings.ST37);\n                } else if (response === 'already-requested') {\n                  setLoading(false);\n                  Alert.alert(Strings.ST104, Strings.ST105);\n                } else if (response === 'incomplete') {\n                  setLoading(false);\n                  Alert.alert(Strings.ST104, Strings.ST32);\n                } else {\n                  setLoading(false);\n                  Alert.alert(Strings.ST104, Strings.ST32);\n                }\n              });\n            } else {\n              setLoading(false);\n              Alert.alert(Strings.ST104, Strings.ST33);\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: Styles.AuthPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/logo.png\"),\n    resizeMode: \"contain\",\n    style: Styles.AuthLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: Styles.AuthContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    label: Strings.ST19,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    mode: \"flat\",\n    autoCapitalize: \"none\",\n    style: Styles.AuthInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    mode: \"contained\",\n    onPress: function onPress() {\n      return login();\n    },\n    style: Styles.AuthButton,\n    contentStyle: Styles.AuthButtonContent,\n    labelStyle: Styles.AuthButtonLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, !loading ? Strings.ST17 : Strings.ST31), React.createElement(View, {\n    style: Styles.AuthBottomContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    activeOpacity: 0.9,\n    onPress: function onPress() {\n      return onChangeScreen('contactform');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: Styles.AuthBottomText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, Strings.ST41, \" \", React.createElement(Text, {\n    style: {\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 24\n    }\n  }, Strings.ST42))))));\n}","map":{"version":3,"sources":["/Users/sachi/Desktop/Mobile App/application/screens/ForgotPass.js"],"names":["React","useState","TextInput","Button","Text","Styles","restPassApi","Strings","ForgotPass","props","loading","setLoading","email","setEmail","onChangeScreen","screen","navigation","navigate","login","then","response","Alert","alert","ST38","ST39","text","ST76","onPress","cancelable","ST104","ST37","ST105","ST32","ST33","AuthPage","require","AuthLogo","AuthContent","ST19","AuthInput","AuthButton","AuthButtonContent","AuthButtonLabel","ST17","ST31","AuthBottomContent","AuthBottomText","ST41","fontWeight","ST42"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { SafeAreaView, View, Alert, Image, TouchableOpacity } from 'react-native';\nimport { TextInput, Button, Text } from 'react-native-paper';\nimport Styles from '../config/Styles';\nimport { restPassApi } from \"../config/DataApp\";\nimport Strings from '../config/Strings';\n\nexport default function ForgotPass(props) {\n\n    const [loading, setLoading] = useState(false);\n    const [email, setEmail] = useState('');\n\n    const onChangeScreen = (screen) => {\n        props.navigation.navigate(screen);\n    };\n\n  const login = async () => {\n\n    setLoading(true);\n\n    if (email) {\n\n        restPassApi(email).then(response => {\n              \n              if (response === 'success') {\n                \n              setLoading(false);\n\n                Alert.alert(\n                  Strings.ST38, Strings.ST39,\n                  [\n                    { text: Strings.ST76, onPress: () => onChangeScreen('login') }\n                  ],\n                  { cancelable: false }\n                );\n              }else if(response === 'email-not-exist'){\n\n                setLoading(false);\n                Alert.alert(Strings.ST104, Strings.ST37);\n\n              }else if(response === 'already-requested'){\n\n                setLoading(false);\n\n                Alert.alert(Strings.ST104, Strings.ST105);\n\n              }else if(response === 'incomplete'){\n\n                setLoading(false);\n                Alert.alert(Strings.ST104, Strings.ST32);\n\n              }else{\n\n                setLoading(false);\n                Alert.alert(Strings.ST104, Strings.ST32);\n              }\n\n        });\n\n      }else{\n            setLoading(false);\n            Alert.alert(Strings.ST104, Strings.ST33);\n          }\n      }\n\n      return (\n\n        <SafeAreaView style={Styles.AuthPage}>\n        <Image source={require('../../assets/logo.png')} resizeMode={\"contain\"} style={Styles.AuthLogo} />\n\n        <View style={Styles.AuthContent}>\n\n        <TextInput label={Strings.ST19} onChangeText={text => setEmail(text)} mode=\"flat\" autoCapitalize=\"none\" style={Styles.AuthInput} />\n\n        <Button mode=\"contained\" onPress={()=> login()} style={Styles.AuthButton} contentStyle={Styles.AuthButtonContent} labelStyle={Styles.AuthButtonLabel}>\n        {!loading ? Strings.ST17 : Strings.ST31}\n        </Button>\n\n        <View style={Styles.AuthBottomContent}>\n        <TouchableOpacity activeOpacity={0.9} onPress={() => onChangeScreen('contactform')}>\n        <Text style={Styles.AuthBottomText}>\n        {Strings.ST41} <Text style={{fontWeight: 'bold'}}>{Strings.ST42}</Text>\n        </Text>\n        </TouchableOpacity>\n        </View>\n\n        </View>\n        </SafeAreaView>\n\n        );\n  }\n"]},"metadata":{},"sourceType":"module"}