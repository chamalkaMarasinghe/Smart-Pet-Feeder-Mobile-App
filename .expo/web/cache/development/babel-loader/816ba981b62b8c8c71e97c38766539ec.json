{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sachi/Desktop/e17-3yp-Smart-Pet-Feeder/MobileApp/node_modules/react-native-video-players/src/VideoSettings.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Styles from \"./Styles\";\nimport ToggleSwitch from \"./VideoPlayerComponents/components/Switch\";\nimport CheckBox from \"./VideoPlayerComponents/components/CheckBox\";\nimport PropTypes from 'prop-types';\nimport Fonts from \"./VideoPlayerComponents/components/Fonts\";\n\nvar VideoSettings = function (_Component) {\n  _inherits(VideoSettings, _Component);\n\n  var _super = _createSuper(VideoSettings);\n\n  function VideoSettings(props) {\n    var _this;\n\n    _classCallCheck(this, VideoSettings);\n\n    _this = _super.call(this, props);\n\n    _this.getOrientation = function () {\n      if (_this.refs.rootView) {\n        if (Dimensions.get('window').width < Dimensions.get('window').height) {\n          _this.setState({\n            currentOreintation: 'portrait'\n          });\n        } else {\n          _this.setState({\n            currentOreintation: 'landscape'\n          });\n        }\n      }\n    };\n\n    _this.renderOptions = function () {\n      return _this.state.qualityArray.map(function (item, index) {\n        return React.createElement(View, {\n          style: Styles.rowView,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }\n        }, React.createElement(CheckBox, {\n          style: {},\n          onChange: function onChange() {\n            _this.props.IsQualityArray ? _this.props.IsQualityArray(item, index) : [_this.setState({\n              boxSelected: index\n            }), _this.setState({\n              autoConnectionStatus: false\n            })];\n          },\n          checked: _this.state.boxSelected == index ? true : false,\n          label: 'hide',\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }\n        }), React.createElement(View, {\n          style: {\n            marginRight: 20\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          style: [Styles.rowTitleText, {}],\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }\n        }, item)));\n      });\n    };\n\n    _this.renderLandscapeOption = function () {\n      return _this.state.qualityArray.map(function () {\n        return React.createElement(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          style: [Styles.rowView, {\n            marginTop: 0,\n            paddingLeft: 25,\n            paddingRight: 25\n          }],\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 11\n          }\n        }, React.createElement(CheckBox, {\n          style: {\n            marginRight: 5\n          },\n          onChange: function onChange() {\n            _this.props.IsQualityArray ? _this.props.IsQualityArray(item, index) : [_this.setState({\n              boxSelected: index\n            }), _this.setState({\n              autoConnectionStatus: false\n            })];\n          },\n          checked: _this.state.boxSelected == index ? true : false,\n          label: 'hide',\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }\n        }), React.createElement(Text, {\n          style: [Styles.rowTitleText, {\n            flex: 1\n          }],\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }\n        }, item)));\n      });\n    };\n\n    _this.state = {\n      qualityArray: _this.props.qualityArray || ['320p', '480p', '720p', '180p'],\n      autoConnectionStatus: true,\n      boxSelected: _this.props.boxSelected || null,\n      rotationText: '',\n      rotationIndex: 1,\n      rotationStatus: false,\n      isScreenRotation: false,\n      currentOreintation: '',\n      infoAlert: false,\n      infoAlertMesg: '',\n      infoKey: '',\n      apiCalled: false,\n      isLoading: false,\n      changeQuality: '',\n      changeOrientation: ''\n    };\n    return _this;\n  }\n\n  _createClass(VideoSettings, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.getOrientation();\n      Dimensions.addEventListener('change', function () {\n        _this2.getOrientation();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return this.state.isScreenRotation == false ? React.createElement(Modal, {\n        animationType: \"slide\",\n        transparent: true,\n        visible: this.props.isOpen,\n        supportedOrientations: ['portrait', 'landscape', 'portrait-upside-down', 'landscape-left', 'landscape-right'],\n        onRequestClose: function onRequestClose() {\n          _this3.props.onVideoSettingsClose(false, _this3.state.changeOrientation, _this3.state.changeQuality);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }\n      }, React.createElement(SafeAreaView, {\n        ref: \"rootView\",\n        style: Styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      }, React.createElement(StatusBar, {\n        hidden: false,\n        translucent: true,\n        backgroundColor: 'rgba(25,54,81,0.9)',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }\n      }), React.createElement(ScrollView, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: Styles.headerView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: Styles.innnerHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: Styles.headerTxt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }, \"Media Quality\")), React.createElement(View, {\n        style: Styles.crossBtnView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this3.props.onVideoSettingsClose(false, _this3.state.changeOrientation, _this3.state.changeQuality);\n        },\n        hitSlop: {\n          top: 5,\n          bottom: 5,\n          left: 5,\n          right: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }, React.createElement(Image, {\n        source: require(\"./VideoPlayerComponents/components/images/Close.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 19\n        }\n      })))), React.createElement(View, {\n        style: Styles.secondView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: [Styles.rowView, {\n          marginTop: 5\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }\n      }, React.createElement(ToggleSwitch, {\n        value: this.state.autoConnectionStatus || this.props.autoConnectionStatus,\n        onValueChange: function onValueChange() {\n          _this3.props.IsAutoConnectionStatus ? _this3.props.IsAutoConnectionStatus() : [_this3.setState({\n            boxSelected: null\n          }), _this3.setState({\n            autoConnectionStatus: !_this3.state.autoConnectionStatus\n          })];\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        style: [Styles.rowTitleText, {\n          flex: 1,\n          marginLeft: 10,\n          fontSize: Fonts.size.normal\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }\n      }, \"Auto based on your connection\")), React.createElement(View, {\n        style: Styles.textView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: Styles.rowText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }\n      }, \"If you are having connection issues, you can force the app to always display videos in these resolutions.\")), this.renderOptions())))) : this.renderElement();\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement() {\n      var _this4 = this;\n\n      return React.createElement(Modal, {\n        animationType: \"slide\",\n        transparent: true,\n        visible: this.props.isOpen,\n        supportedOrientations: ['portrait', 'landscape', 'portrait-upside-down', 'landscape-left', 'landscape-right'],\n        onRequestClose: function onRequestClose() {\n          _this4.props.onVideoSettingsClose(false, _this4.state.changeOrientation, _this4.state.changeQuality);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 7\n        }\n      }, React.createElement(SafeAreaView, {\n        ref: \"rootView\",\n        style: Styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }\n      }, React.createElement(StatusBar, {\n        hidden: false,\n        translucent: true,\n        backgroundColor: 'rgba(25,54,81,0.9)',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }\n      }), \"// \", React.createElement(Loader, {\n        loading: this.state.isLoading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 14\n        }\n      }), \"//\", ' ', React.createElement(ScrollView, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: [Styles.headerView, {\n          marginTop: 20\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: [Styles.innnerHeader, {\n          marginLeft: 25\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: Styles.headerTxt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }\n      }, \"Media Quality\")), React.createElement(View, {\n        style: [Styles.crossBtnView, {\n          marginRight: 25\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this4.props.onVideoSettingsClose(false, _this4.state.changeOrientation, _this4.state.changeQuality);\n        },\n        hitSlop: {\n          top: 5,\n          bottom: 5,\n          left: 5,\n          right: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }\n      }, React.createElement(Image, {\n        source: require(\"./VideoPlayerComponents/components/images/Close.png\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 19\n        }\n      })))), React.createElement(View, {\n        style: [Styles.secondView, {\n          marginTop: 20\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: [Styles.rowView, {\n          marginTop: 5,\n          paddingLeft: 25,\n          paddingRight: 25\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 15\n        }\n      }, React.createElement(ToggleSwitch, {\n        value: this.state.autoConnectionStatus || this.props.autoConnectionStatus,\n        onValueChange: function onValueChange() {\n          _this4.setState({\n            boxSelected: null\n          });\n\n          _this4.props.IsAutoConnectionStatus ? _this4.props.IsAutoConnectionStatus() : _this4.setState({\n            autoConnectionStatus: !_this4.state.autoConnectionStatus\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        style: [Styles.rowTitleText, {\n          flex: 1,\n          marginLeft: 10,\n          fontSize: Fonts.size.normal\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 17\n        }\n      }, \"Auto based on your connection\")), React.createElement(View, {\n        style: [Styles.textView, {\n          marginTop: 10\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: [Styles.rowText, {\n          marginHorizontal: 25\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 17\n        }\n      }, \"If you are having connection issues, you can force the app to always display videos in these resolutions\")), this.renderLandscapeOption()))));\n    }\n  }]);\n\n  return VideoSettings;\n}(Component);\n\nVideoSettings.propTypes = {\n  isOpen: PropTypes.bool,\n  openFromVideo: PropTypes.string\n};\nexport default VideoSettings;","map":{"version":3,"sources":["/Users/sachi/Desktop/e17-3yp-Smart-Pet-Feeder/MobileApp/node_modules/react-native-video-players/src/VideoSettings.js"],"names":["React","Component","Styles","ToggleSwitch","CheckBox","PropTypes","Fonts","VideoSettings","props","getOrientation","refs","rootView","Dimensions","get","width","height","setState","currentOreintation","renderOptions","state","qualityArray","map","item","index","rowView","IsQualityArray","boxSelected","autoConnectionStatus","marginRight","rowTitleText","renderLandscapeOption","flexDirection","marginTop","paddingLeft","paddingRight","flex","rotationText","rotationIndex","rotationStatus","isScreenRotation","infoAlert","infoAlertMesg","infoKey","apiCalled","isLoading","changeQuality","changeOrientation","addEventListener","isOpen","onVideoSettingsClose","container","headerView","innnerHeader","headerTxt","crossBtnView","top","bottom","left","right","require","secondView","IsAutoConnectionStatus","marginLeft","fontSize","size","normal","textView","rowText","renderElement","marginHorizontal","propTypes","bool","openFromVideo","string"],"mappings":"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","sourcesContent":["//import liraries\nimport React, { Component } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  Image,\n  Modal,\n  ScrollView,\n  SafeAreaView,\n  Dimensions,\n  StatusBar,\n} from 'react-native';\nimport Styles from './Styles';\nimport ToggleSwitch from './VideoPlayerComponents/components/Switch';\nimport CheckBox from './VideoPlayerComponents/components/CheckBox';\nimport PropTypes from 'prop-types';\nimport Fonts from './VideoPlayerComponents/components/Fonts';\n\n// create a component\nclass VideoSettings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      qualityArray: this.props.qualityArray || ['320p', '480p', '720p', '180p'],\n      autoConnectionStatus: true,\n      boxSelected: this.props.boxSelected || null,\n      rotationText: '',\n      rotationIndex: 1,\n      rotationStatus: false,\n      isScreenRotation: false,\n      currentOreintation: '',\n      infoAlert: false,\n      infoAlertMesg: '',\n      infoKey: '',\n      apiCalled: false,\n      isLoading: false,\n      changeQuality: '',\n      changeOrientation: '',\n    };\n  }\n\n  /* Life cycles methods. */\n  componentDidMount() {\n    this.getOrientation();\n    Dimensions.addEventListener('change', () => {\n      this.getOrientation();\n    });\n  }\n\n  getOrientation = () => {\n    if (this.refs.rootView) {\n      if (Dimensions.get('window').width < Dimensions.get('window').height) {\n        this.setState({ currentOreintation: 'portrait' });\n        \n      } else {\n        this.setState({ currentOreintation: 'landscape' });\n\n      }\n    }\n  };\n\n  renderOptions = () => {\n    return this.state.qualityArray.map((item, index) => {\n      return (\n        <View style={Styles.rowView}>\n          <CheckBox\n            style={{}}\n            onChange={() => {\n        \n              this.props.IsQualityArray\n                ? this.props.IsQualityArray(item, index)\n                : [this.setState({ boxSelected: index }), this.setState({ autoConnectionStatus: false })]\n            }}\n            checked={this.state.boxSelected == index ? true : false}\n            label={'hide'}\n          />\n          <View style={{ marginRight: 20 }}>\n            <Text style={[Styles.rowTitleText, {}]}>{item}</Text>\n          </View>\n        </View>\n      );\n    });\n  };\n\n  render() {\n    /** Modal screen for portrait **/\n    return this.state.isScreenRotation == false ? (\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={this.props.isOpen}\n        supportedOrientations={[\n          'portrait',\n          'landscape',\n          'portrait-upside-down',\n          'landscape-left',\n          'landscape-right',\n        ]}\n        onRequestClose={() => {\n          this.props.onVideoSettingsClose(\n            false,\n            this.state.changeOrientation,\n            this.state.changeQuality,\n          );\n        }}>\n        <SafeAreaView ref=\"rootView\" style={Styles.container}>\n          <StatusBar\n            hidden={false}\n            translucent={true}\n            backgroundColor={'rgba(25,54,81,0.9)'}\n          />\n          <ScrollView style={{ flex: 1 }}>\n            {/* ============= Info popup ============== */}\n\n            <View style={Styles.headerView}>\n              <View style={Styles.innnerHeader}>\n                <Text style={Styles.headerTxt}>Media Quality</Text>\n              </View>\n              <View style={Styles.crossBtnView}>\n                <TouchableOpacity\n                  onPress={() => {\n                    this.props.onVideoSettingsClose(\n                      false,\n                      this.state.changeOrientation,\n                      this.state.changeQuality,\n                    );\n                  }}\n                  hitSlop={{ top: 5, bottom: 5, left: 5, right: 5 }}>\n                  <Image\n                    source={require('./VideoPlayerComponents/components/images/Close.png')}></Image>\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            {/* ============= Auto based connection view ============== */}\n            <View style={Styles.secondView}>\n              <View style={[Styles.rowView, { marginTop: 5 }]}>\n                <ToggleSwitch\n                  value={\n                    this.state.autoConnectionStatus ||\n                    this.props.autoConnectionStatus\n                  }\n                  onValueChange={() => {\n\n                    this.props.IsAutoConnectionStatus\n                      ? this.props.IsAutoConnectionStatus()\n                      : [ this.setState({ boxSelected: null }),this.setState({\n                        autoConnectionStatus: !this.state\n                          .autoConnectionStatus,\n                      })]\n                  }}\n                />\n                <Text\n                  style={[\n                    Styles.rowTitleText,\n                    {\n                      flex: 1,\n                      marginLeft: 10,\n                      fontSize: Fonts.size.normal,\n                      // fontFamily: Fonts.type.Bold,\n                    },\n                  ]}>\n                  Auto based on your connection\n                </Text>\n              </View>\n\n              {/* ============= Different video resolution view ============== */}\n              <View style={Styles.textView}>\n                <Text style={Styles.rowText}>\n                  If you are having connection issues, you can force the app to\n                  always display videos in these resolutions.\n                </Text>\n              </View>\n              {this.renderOptions()}\n            </View>\n          </ScrollView>\n        </SafeAreaView>\n      </Modal>\n    ) : (\n        this.renderElement()\n      );\n  }\n\n  renderLandscapeOption = () => {\n    return this.state.qualityArray.map(() => {\n      return (\n        <View style={{ flexDirection: 'row' }}>\n          <View\n            style={[\n              Styles.rowView,\n              { marginTop: 0, paddingLeft: 25, paddingRight: 25 },\n            ]}>\n            <CheckBox\n              style={{ marginRight: 5 }}\n              onChange={() => {\n                this.props.IsQualityArray\n                  ? this.props.IsQualityArray(item, index)\n                  : [this.setState({ boxSelected: index }),this.setState({ autoConnectionStatus: false })]\n              }}\n              checked={this.state.boxSelected == index ? true : false}\n              label={'hide'}\n            />\n            <Text style={[Styles.rowTitleText, { flex: 1 }]}>{item}</Text>\n          </View>\n        </View>\n      );\n    });\n  };\n  /** Modal screen for landscape **/\n  renderElement() {\n    return (\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={this.props.isOpen}\n        supportedOrientations={[\n          'portrait',\n          'landscape',\n          'portrait-upside-down',\n          'landscape-left',\n          'landscape-right',\n        ]}\n        onRequestClose={() => {\n          this.props.onVideoSettingsClose(\n            false,\n            this.state.changeOrientation,\n            this.state.changeQuality,\n          );\n        }}>\n        <SafeAreaView ref=\"rootView\" style={Styles.container}>\n          <StatusBar\n            hidden={false}\n            translucent={true}\n            backgroundColor={'rgba(25,54,81,0.9)'}\n          />\n          // <Loader loading={this.state.isLoading} />\n          //{' '}\n          <ScrollView style={{ flex: 1 }}>\n            {/* ============= Header View ============== */}\n            <View style={[Styles.headerView, { marginTop: 20 }]}>\n              <View style={[Styles.innnerHeader, { marginLeft: 25 }]}>\n                <Text style={Styles.headerTxt}>Media Quality</Text>\n              </View>\n              <View style={[Styles.crossBtnView, { marginRight: 25 }]}>\n                <TouchableOpacity\n                  onPress={() => {\n                    this.props.onVideoSettingsClose(\n                      false,\n                      this.state.changeOrientation,\n                      this.state.changeQuality,\n                    );\n                  }}\n                  hitSlop={{ top: 5, bottom: 5, left: 5, right: 5 }}>\n                  <Image\n                    source={require('./VideoPlayerComponents/components/images/Close.png')}></Image>\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            {/* ============= Auto connection ============== */}\n            <View style={[Styles.secondView, { marginTop: 20 }]}>\n              <View\n                style={[\n                  Styles.rowView,\n                  { marginTop: 5, paddingLeft: 25, paddingRight: 25 },\n                ]}>\n                <ToggleSwitch\n                  value={\n                    this.state.autoConnectionStatus ||\n                    this.props.autoConnectionStatus\n                  }\n                  onValueChange={() => {\n                    this.setState({ boxSelected: null })\n                    this.props.IsAutoConnectionStatus\n                      ? this.props.IsAutoConnectionStatus()\n                      : this.setState({\n                        autoConnectionStatus: !this.state\n                          .autoConnectionStatus,\n                      });\n                  }}\n                />\n                <Text\n                  style={[\n                    Styles.rowTitleText,\n                    {\n                      flex: 1,\n                      marginLeft: 10,\n                      fontSize: Fonts.size.normal,\n                      // fontFamily: Fonts.type.Bold,\n                    },\n                  ]}>\n                  Auto based on your connection\n                </Text>\n              </View>\n\n              <View style={[Styles.textView, { marginTop: 10 }]}>\n                <Text style={[Styles.rowText, { marginHorizontal: 25 }]}>\n                  If you are having connection issues, you can force the app to\n                  always display videos in these resolutions\n                </Text>\n              </View>\n\n              {this.renderLandscapeOption()}\n            </View>\n          </ScrollView>\n        </SafeAreaView>\n      </Modal>\n    );\n  }\n}\n\nVideoSettings.propTypes = {\n  isOpen: PropTypes.bool,\n  openFromVideo: PropTypes.string,\n};\n\nexport default VideoSettings;\n"]},"metadata":{},"sourceType":"module"}