{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/sachi/Desktop/Mobile App/application/screens/Register.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Text, TextInput, Button, Checkbox } from 'react-native-paper';\nimport Styles from \"../config/Styles\";\nimport { size } from \"lodash\";\nimport { signUpApi, checkUserApi, setUserData, setLogged } from \"../config/DataApp\";\nimport ColorsApp from \"../config/ColorsApp\";\nimport Strings from \"../config/Strings\";\nimport UserContext from \"../context/UserContext\";\nexport default function Register(props) {\n  var contextState = useContext(UserContext);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      email = _useState6[0],\n      setEmail = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      password = _useState8[0],\n      setPassword = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      checked = _useState10[0],\n      setChecked = _useState10[1];\n\n  var onChangeScreen = function onChangeScreen(screen) {\n    props.navigation.navigate(screen);\n  };\n\n  var register = function register() {\n    return _regeneratorRuntime.async(function register$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n\n            if (!(name, email, password, checked != false)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(signUpApi(name, email, password).then(function (response) {\n              if (response === 'success') {\n                checkUserApi(email).then(function (response) {\n                  setUserData(response).then(function (response) {\n                    contextState.updateValue(response[0]);\n                    setLoading(false);\n                    setLogged(true);\n                    props.navigation.navigate('home');\n                  });\n                });\n              } else if (response === 'exist') {\n                setLoading(false);\n                Alert.alert(Strings.ST104, Strings.ST36);\n              } else if (response === 'incomplete') {\n                setLoading(false);\n                Alert.alert(Strings.ST104, Strings.ST33);\n              }\n            }));\n\n          case 4:\n            _context.next = 8;\n            break;\n\n          case 6:\n            setLoading(false);\n            Alert.alert(Strings.ST104, Strings.ST33);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: Styles.AuthPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/logo.png\"),\n    resizeMode: \"contain\",\n    style: Styles.AuthLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    style: Styles.AuthContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, {\n    label: Strings.ST18,\n    onChangeText: function onChangeText(text) {\n      return setName(text);\n    },\n    mode: \"flat\",\n    style: Styles.AuthInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }), React.createElement(TextInput, {\n    label: Strings.ST19,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    mode: \"flat\",\n    autoCapitalize: \"none\",\n    style: Styles.AuthInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }), React.createElement(TextInput, {\n    label: Strings.ST20,\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    mode: \"flat\",\n    secureTextEntry: true,\n    style: Styles.AuthInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    style: {\n      justifyContent: 'flex-start',\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, React.createElement(Checkbox.Android, {\n    color: ColorsApp.PRIMARY,\n    uncheckedColor: \"#b9b9b9\",\n    status: checked ? 'checked' : 'unchecked',\n    onPress: function onPress() {\n      setChecked(!checked);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }), React.createElement(TouchableOpacity, {\n    activeOpacity: 0.8,\n    onPress: function onPress() {\n      return onChangeScreen(\"terms\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: Styles.AuthCheckBoxLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, Strings.ST14))), React.createElement(Button, {\n    mode: \"contained\",\n    onPress: function onPress() {\n      return register();\n    },\n    style: Styles.AuthButton,\n    contentStyle: Styles.AuthButtonContent,\n    labelStyle: Styles.AuthButtonLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, !loading ? Strings.ST17 : Strings.ST31), React.createElement(View, {\n    style: Styles.AuthBottomContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    activeOpacity: 0.9,\n    onPress: function onPress() {\n      return onChangeScreen('login');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: Styles.AuthBottomText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, Strings.ST13, \" \", React.createElement(Text, {\n    style: {\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 20\n    }\n  }, Strings.ST34))))));\n}","map":{"version":3,"sources":["/Users/sachi/Desktop/Mobile App/application/screens/Register.js"],"names":["React","useState","useContext","Text","TextInput","Button","Checkbox","Styles","size","signUpApi","checkUserApi","setUserData","setLogged","ColorsApp","Strings","UserContext","Register","props","contextState","loading","setLoading","name","setName","email","setEmail","password","setPassword","checked","setChecked","onChangeScreen","screen","navigation","navigate","register","then","response","updateValue","Alert","alert","ST104","ST36","ST33","AuthPage","require","AuthLogo","AuthContent","ST18","text","AuthInput","ST19","ST20","justifyContent","flexDirection","alignItems","marginTop","PRIMARY","AuthCheckBoxLabel","ST14","AuthButton","AuthButtonContent","AuthButtonLabel","ST17","ST31","AuthBottomContent","AuthBottomText","ST13","fontWeight","ST34"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;;;;;;AAEA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAkD,oBAAlD;AACA,OAAOC,MAAP;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,WAAlC,EAA+CC,SAA/C;AACA,OAAOC,SAAP;AACA,OAAOC,OAAP;AACA,OAAOC,WAAP;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAEtC,MAAMC,YAAY,GAAGhB,UAAU,CAACa,WAAD,CAA/B;;AACA,kBAA8Bd,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOkB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAwBnB,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOoB,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA0BrB,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOsB,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAgCvB,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOwB,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA8BzB,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAO0B,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAY;AACjCb,IAAAA,KAAK,CAACc,UAAN,CAAiBC,QAAjB,CAA0BF,MAA1B;AACD,GAFD;;AAIA,MAAMG,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAEfb,YAAAA,UAAU,CAAC,IAAD,CAAV;;AAFe,kBAIXC,IAAI,EAAEE,KAAF,EAASE,QAAT,EAAmBE,OAAO,IAAI,KAJvB;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAMPlB,SAAS,CAACY,IAAD,EAAOE,KAAP,EAAcE,QAAd,CAAT,CAAiCS,IAAjC,CAAsC,UAAAC,QAAQ,EAAI;AAEtD,kBAAIA,QAAQ,KAAK,SAAjB,EAA4B;AAE5BzB,gBAAAA,YAAY,CAACa,KAAD,CAAZ,CAAoBW,IAApB,CAAyB,UAAAC,QAAQ,EAAI;AAC/BxB,kBAAAA,WAAW,CAACwB,QAAD,CAAX,CAAsBD,IAAtB,CAA2B,UAAAC,QAAQ,EAAI;AACvCjB,oBAAAA,YAAY,CAACkB,WAAb,CAAyBD,QAAQ,CAAC,CAAD,CAAjC;AACAf,oBAAAA,UAAU,CAAC,KAAD,CAAV;AACAR,oBAAAA,SAAS,CAAC,IAAD,CAAT;AACAK,oBAAAA,KAAK,CAACc,UAAN,CAAiBC,QAAjB,CAA0B,MAA1B;AACD,mBALC;AAML,iBAPD;AASC,eAXD,MAWM,IAAGG,QAAQ,KAAK,OAAhB,EAAwB;AAE5Bf,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACAiB,gBAAAA,KAAK,CAACC,KAAN,CAAYxB,OAAO,CAACyB,KAApB,EAA2BzB,OAAO,CAAC0B,IAAnC;AAED,eALK,MAKA,IAAGL,QAAQ,KAAK,YAAhB,EAA6B;AAEjCf,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACAiB,gBAAAA,KAAK,CAACC,KAAN,CAAYxB,OAAO,CAACyB,KAApB,EAA2BzB,OAAO,CAAC2B,IAAnC;AAED;AACF,aAxBK,CANO;;AAAA;AAAA;AAAA;;AAAA;AAiCbrB,YAAAA,UAAU,CAAC,KAAD,CAAV;AACAiB,YAAAA,KAAK,CAACC,KAAN,CAAYxB,OAAO,CAACyB,KAApB,EAA2BzB,OAAO,CAAC2B,IAAnC;;AAlCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAsCA,SAEE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAElC,MAAM,CAACmC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEC,OAAO,yBAAtB;AAAiD,IAAA,UAAU,EAAE,SAA7D;AAAwE,IAAA,KAAK,EAAEpC,MAAM,CAACqC,QAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAGA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAErC,MAAM,CAACsC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE/B,OAAO,CAACgC,IAA1B;AAAgC,IAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,aAAIzB,OAAO,CAACyB,IAAD,CAAX;AAAA,KAAlD;AAAqE,IAAA,IAAI,EAAC,MAA1E;AAAiF,IAAA,KAAK,EAAExC,MAAM,CAACyC,SAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAGA,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAElC,OAAO,CAACmC,IAA1B;AAAgC,IAAA,YAAY,EAAE,sBAAAF,IAAI;AAAA,aAAIvB,QAAQ,CAACuB,IAAD,CAAZ;AAAA,KAAlD;AAAsE,IAAA,IAAI,EAAC,MAA3E;AAAkF,IAAA,cAAc,EAAC,MAAjG;AAAwG,IAAA,KAAK,EAAExC,MAAM,CAACyC,SAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,EAIA,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAElC,OAAO,CAACoC,IAA1B;AAAgC,IAAA,YAAY,EAAE,sBAAAH,IAAI;AAAA,aAAIrB,WAAW,CAACqB,IAAD,CAAf;AAAA,KAAlD;AAAyE,IAAA,IAAI,EAAC,MAA9E;AAAqF,IAAA,eAAe,EAAE,IAAtG;AAA4G,IAAA,KAAK,EAAExC,MAAM,CAACyC,SAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,EAKA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACG,MAAAA,cAAc,EAAE,YAAjB;AAA+BC,MAAAA,aAAa,EAAE,KAA9C;AAAqDC,MAAAA,UAAU,EAAE,QAAjE;AAA2EC,MAAAA,SAAS,EAAE;AAAtF,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,QAAD,CAAU,OAAV;AAAkB,IAAA,KAAK,EAAEzC,SAAS,CAAC0C,OAAnC;AAA4C,IAAA,cAAc,EAAE,SAA5D;AAAuE,IAAA,MAAM,EAAE5B,OAAO,GAAG,SAAH,GAAe,WAArG;AAAkH,IAAA,OAAO,EAAE,mBAAM;AAAEC,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AAAuB,KAA1J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA,oBAAC,gBAAD;AAAkB,IAAA,aAAa,EAAE,GAAjC;AAAsC,IAAA,OAAO,EAAE;AAAA,aAAME,cAAc,CAAC,OAAD,CAApB;AAAA,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtB,MAAM,CAACiD,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwC1C,OAAO,CAAC2C,IAAhD,CADA,CAFA,CALA,EAWA,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,WAAb;AAAyB,IAAA,OAAO,EAAE;AAAA,aAAKxB,QAAQ,EAAb;AAAA,KAAlC;AAAmD,IAAA,KAAK,EAAE1B,MAAM,CAACmD,UAAjE;AAA6E,IAAA,YAAY,EAAEnD,MAAM,CAACoD,iBAAlG;AAAqH,IAAA,UAAU,EAAEpD,MAAM,CAACqD,eAAxI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,CAACzC,OAAD,GAAWL,OAAO,CAAC+C,IAAnB,GAA0B/C,OAAO,CAACgD,IADnC,CAXA,EAeA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEvD,MAAM,CAACwD,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,gBAAD;AAAkB,IAAA,aAAa,EAAE,GAAjC;AAAsC,IAAA,OAAO,EAAE;AAAA,aAAMlC,cAAc,CAAC,OAAD,CAApB;AAAA,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtB,MAAM,CAACyD,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACClD,OAAO,CAACmD,IADT,OACe,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,UAAU,EAAE;AAAb,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCpD,OAAO,CAACqD,IAA5C,CADf,CADA,CADA,CAfA,CAHA,CAFF;AAgCD","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { SafeAreaView, View, Alert, TouchableOpacity, Image } from 'react-native';\nimport { Text, TextInput, Button, Checkbox } from 'react-native-paper';\nimport Styles from '../config/Styles';\nimport { size } from \"lodash\";\nimport { signUpApi, checkUserApi, setUserData, setLogged } from \"../config/DataApp\";\nimport ColorsApp from '../config/ColorsApp';\nimport Strings from '../config/Strings';\nimport UserContext from '../context/UserContext';\n\nexport default function Register(props) {\n\n  const contextState = useContext(UserContext);\n  const [loading, setLoading] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [checked, setChecked] = useState(false);\n\n  const onChangeScreen = (screen) => {\n    props.navigation.navigate(screen);\n  };\n\n  const register = async () => {\n\n    setLoading(true);\n\n    if (name, email, password, checked != false) {\n\n      await signUpApi(name, email, password).then(response => {\n\n        if (response === 'success') {\n\n        checkUserApi(email).then(response => {\n              setUserData(response).then(response => {\n              contextState.updateValue(response[0]);\n              setLoading(false);\n              setLogged(true);\n              props.navigation.navigate('home');\n            });\n        });\n\n        }else if(response === 'exist'){\n\n          setLoading(false);\n          Alert.alert(Strings.ST104, Strings.ST36);\n\n        }else if(response === 'incomplete'){\n\n          setLoading(false);\n          Alert.alert(Strings.ST104, Strings.ST33);\n\n        }\n      });\n\n    }else{\n      setLoading(false);\n      Alert.alert(Strings.ST104, Strings.ST33);\n    }\n  }\n\n  return (\n\n    <SafeAreaView style={Styles.AuthPage}>\n    <Image source={require('../../assets/logo.png')} resizeMode={\"contain\"} style={Styles.AuthLogo} />\n\n    <View style={Styles.AuthContent}>\n\n    <TextInput label={Strings.ST18} onChangeText={text => setName(text)} mode=\"flat\" style={Styles.AuthInput} />\n    <TextInput label={Strings.ST19} onChangeText={text => setEmail(text)} mode=\"flat\" autoCapitalize=\"none\" style={Styles.AuthInput} />\n    <TextInput label={Strings.ST20} onChangeText={text => setPassword(text)} mode=\"flat\" secureTextEntry={true} style={Styles.AuthInput} />\n    <View style={{justifyContent: 'flex-start', flexDirection: 'row', alignItems: 'center', marginTop: 10}}>\n    <Checkbox.Android color={ColorsApp.PRIMARY} uncheckedColor={\"#b9b9b9\"} status={checked ? 'checked' : 'unchecked'} onPress={() => { setChecked(!checked); }} />\n    <TouchableOpacity activeOpacity={0.8} onPress={() => onChangeScreen(\"terms\")}>\n    <Text style={Styles.AuthCheckBoxLabel}>{Strings.ST14}</Text>\n    </TouchableOpacity>\n    </View>\n    <Button mode=\"contained\" onPress={()=> register()} style={Styles.AuthButton} contentStyle={Styles.AuthButtonContent} labelStyle={Styles.AuthButtonLabel}>\n    {!loading ? Strings.ST17 : Strings.ST31}\n    </Button>\n\n    <View style={Styles.AuthBottomContent}>\n    <TouchableOpacity activeOpacity={0.9} onPress={() => onChangeScreen('login')}>\n    <Text style={Styles.AuthBottomText}>\n    {Strings.ST13} <Text style={{fontWeight: 'bold'}}>{Strings.ST34}</Text>\n    </Text>\n    </TouchableOpacity>\n    </View>\n\n    </View>\n    </SafeAreaView>\n\n    );\n}\n"]},"metadata":{},"sourceType":"module"}