{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sachi/Desktop/e17-3yp-Smart-Pet-Feeder/MobileApp/node_modules/react-native-video-players/src/VideoPlayerComponents/gradientProgress/src/CircularProgress.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Svg, { Defs, Stop, G, Path, LinearGradient, Circle } from 'react-native-svg';\nimport { arc } from 'd3-shape';\nimport range from 'lodash/range';\nimport convert from 'color-convert';\n\nfunction calculateStopColor(i, beginColor, endColor, segments) {\n  return [Math.round(beginColor[0] + (endColor[0] - beginColor[0]) * i / segments), Math.round(beginColor[1] + (endColor[1] - beginColor[1]) * i / segments), Math.round(beginColor[2] + (endColor[2] - beginColor[2]) * i / segments)];\n}\n\nvar LINEAR_GRADIENT_PREFIX_ID = 'gradientRing';\n\nvar CircularProgress = function (_Component) {\n  _inherits(CircularProgress, _Component);\n\n  var _super = _createSuper(CircularProgress);\n\n  function CircularProgress(props) {\n    var _this;\n\n    _classCallCheck(this, CircularProgress);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    _this.animatedValue = new Animated.Value(0);\n    _this.value = 0;\n\n    _this.animatedValue.addListener(function (_ref) {\n      var value = _ref.value;\n      _this.value = value;\n    });\n\n    return _this;\n  }\n\n  _createClass(CircularProgress, [{\n    key: \"extractFill\",\n    value: function extractFill() {\n      return Math.min(100, Math.max(0, this.props.fill));\n    }\n  }, {\n    key: \"renderBackgroundPath\",\n    value: function renderBackgroundPath() {\n      var _this$state = this.state,\n          r1 = _this$state.r1,\n          r2 = _this$state.r2;\n      var _this$props = this.props,\n          size = _this$props.size,\n          width = _this$props.width,\n          backgroundColor = _this$props.backgroundColor;\n      var backgroundPath = arc().innerRadius(r1).outerRadius(r2).startAngle(0).endAngle(2 * Math.PI);\n      return React.createElement(Path, {\n        x: size / 2,\n        y: size / 2,\n        d: backgroundPath(),\n        fill: backgroundColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"renderCirclePaths\",\n    value: function renderCirclePaths() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          r1 = _this$state2.r1,\n          r2 = _this$state2.r2,\n          segments = _this$state2.segments;\n      var _this$props2 = this.props,\n          size = _this$props2.size,\n          width = _this$props2.width,\n          beginColor = _this$props2.beginColor;\n      var fill = this.extractFill();\n      var numberOfPathsToDraw = Math.floor(2 * Math.PI * (fill / 100) / (2 * Math.PI / segments));\n      var rem = 2 * Math.PI * (fill / 100) / (2 * Math.PI / segments) % 1;\n\n      if (rem > 0) {\n        numberOfPathsToDraw++;\n      }\n\n      var startAngle = 0;\n      var stopAngle = -(2 * Math.PI) / segments;\n      return [React.createElement(Circle, {\n        key: \"start_circle\",\n        cx: size / 2,\n        cy: width / 2,\n        r: width / 2,\n        fill: beginColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }\n      })].concat(_toConsumableArray(range(1, numberOfPathsToDraw + 1).map(function (i) {\n        if (i === numberOfPathsToDraw && rem) {\n          stopAngle = -2 * Math.PI * (fill / 100);\n        }\n\n        var circlePath = arc().innerRadius(r1).outerRadius(r2).startAngle(startAngle).endAngle(stopAngle - 0.005);\n        var path = React.createElement(Path, {\n          x: _this2.props.size / 2,\n          y: _this2.props.size / 2,\n          key: fill + i,\n          d: circlePath(),\n          fill: 'url(#' + LINEAR_GRADIENT_PREFIX_ID + (segments - i + 1) + ')',\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }\n        });\n        startAngle = stopAngle;\n        stopAngle -= 2 * Math.PI / segments;\n        return path;\n      })), [React.createElement(Circle, {\n        key: \"end_circle\",\n        cx: (r2 - (r2 - r1) / 2) * Math.sin(2 * Math.PI * (fill / 100) - Math.PI) + size / 2,\n        cy: (r2 - (r2 - r1) / 2) * Math.cos(2 * Math.PI * (fill / 100) - Math.PI) + size / 2,\n        r: width / 2,\n        fill: 'rgb(' + calculateStopColor(this.extractFill(), this.state.endColor, this.state.beginColor, 100).join(',') + ')',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 7\n        }\n      })]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          size = _this$props3.size,\n          rotation = _this$props3.rotation,\n          style = _this$props3.style,\n          children = _this$props3.children;\n      var linearGradients = this.state.linearGradients;\n      var fill = this.extractFill();\n      this.SetInterpolate = this.animatedValue.interpolate({\n        inputRange: [0, 180],\n        outputRange: ['180deg', '360deg']\n      });\n      var Rotate_Y_AnimatedStyle = {\n        transform: [{\n          rotateY: this.SetInterpolate\n        }]\n      };\n      return React.createElement(Animated.View, {\n        style: [style, Rotate_Y_AnimatedStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 7\n        }\n      }, React.createElement(Svg, {\n        width: size,\n        height: size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      }, React.createElement(Defs, {\n        key: \"linear_gradients\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }\n      }, linearGradients), React.createElement(G, {\n        rotation: 0,\n        originX: size / 2,\n        originY: size / 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }\n      }, this.renderBackgroundPath(), this.renderCirclePaths())), children && children(fill));\n    }\n  }], [{\n    key: \"renderLinearGradients\",\n    value: function renderLinearGradients(state) {\n      var _this3 = this;\n\n      var r1 = state.r1,\n          beginColor = state.beginColor,\n          endColor = state.endColor,\n          segments = state.segments;\n      var startColor = beginColor;\n      var stopColor = calculateStopColor(1, beginColor, endColor, segments);\n      var startAngle = 0;\n      var stopAngle = 2 * Math.PI / segments;\n      return range(1, segments + 1).map(function (i) {\n        var linearGradient = React.createElement(LinearGradient, {\n          id: LINEAR_GRADIENT_PREFIX_ID + i,\n          key: LINEAR_GRADIENT_PREFIX_ID + i,\n          x1: r1 * Math.sin(startAngle),\n          y1: -r1 * Math.cos(startAngle),\n          x2: r1 * Math.sin(stopAngle),\n          y2: -r1 * Math.cos(stopAngle),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 9\n          }\n        }, React.createElement(Stop, {\n          offset: \"0\",\n          stopColor: 'rgb(' + startColor.join(',') + ')',\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }\n        }), React.createElement(Stop, {\n          offset: \"1\",\n          stopColor: 'rgb(' + stopColor.join(',') + ')',\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 11\n          }\n        }));\n        startColor = stopColor;\n        stopColor = calculateStopColor(i + 1, beginColor, endColor, segments);\n        startAngle = stopAngle;\n        stopAngle += 2 * Math.PI / segments;\n        return linearGradient;\n      });\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var width = nextProps.width,\n          size = nextProps.size,\n          beginColor = nextProps.beginColor,\n          endColor = nextProps.endColor,\n          segments = nextProps.segments;\n      var nextState = {};\n\n      if (segments !== prevState.segments) {\n        nextState.segments = segments;\n      }\n\n      if (width !== prevState.width || size !== prevState.size) {\n        var r2 = size / 2;\n        nextState = _objectSpread(_objectSpread({}, nextState), {}, {\n          r1: r2 - width,\n          r2: r2,\n          width: width,\n          size: size\n        });\n      }\n\n      if (beginColor !== prevState.beginColorCached || endColor !== prevState.endColorCached) {\n        nextState = _objectSpread(_objectSpread({}, nextState), {}, {\n          beginColorCached: beginColor,\n          endColorCached: endColor,\n          beginColor: convert.hex.rgb(endColor),\n          endColor: convert.hex.rgb(beginColor)\n        });\n      }\n\n      var keys = Object.keys(nextState);\n\n      if (keys.length) {\n        var combinedState = _objectSpread(_objectSpread({}, prevState), nextState);\n\n        nextState.linearGradients = CircularProgress.renderLinearGradients(combinedState);\n      }\n\n      return keys.length ? nextState : null;\n    }\n  }]);\n\n  return CircularProgress;\n}(Component);\n\nexport { CircularProgress as default };\nCircularProgress.propTypes = {\n  backgroundColor: PropTypes.string,\n  children: PropTypes.func,\n  fill: PropTypes.number.isRequired,\n  rotation: PropTypes.number,\n  size: PropTypes.number.isRequired,\n  style: ViewPropTypes.style,\n  tintColor: PropTypes.string,\n  width: PropTypes.number.isRequired,\n  linecap: PropTypes.string\n};\nCircularProgress.defaultProps = {\n  tintColor: 'black',\n  backgroundColor: '#e4e4e4',\n  rotation: 90,\n  linecap: 'butt'\n};","map":{"version":3,"sources":["/Users/sachi/Desktop/e17-3yp-Smart-Pet-Feeder/MobileApp/node_modules/react-native-video-players/src/VideoPlayerComponents/gradientProgress/src/CircularProgress.js"],"names":["React","Component","PropTypes","ViewPropTypes","Svg","Defs","Stop","G","Path","LinearGradient","Circle","arc","range","convert","calculateStopColor","i","beginColor","endColor","segments","Math","round","LINEAR_GRADIENT_PREFIX_ID","CircularProgress","props","state","animatedValue","Animated","Value","value","addListener","min","max","fill","r1","r2","size","width","backgroundColor","backgroundPath","innerRadius","outerRadius","startAngle","endAngle","PI","extractFill","numberOfPathsToDraw","floor","rem","stopAngle","map","circlePath","path","sin","cos","join","rotation","style","children","linearGradients","SetInterpolate","interpolate","inputRange","outputRange","Rotate_Y_AnimatedStyle","transform","rotateY","renderBackgroundPath","renderCirclePaths","startColor","stopColor","linearGradient","nextProps","prevState","nextState","beginColorCached","endColorCached","hex","rgb","keys","Object","length","combinedState","renderLinearGradients","propTypes","string","func","number","isRequired","tintColor","linecap","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;SACeC,a;;AACf,OAAOC,GAAP,IAAcC,IAAd,EAAoBC,IAApB,EAA0BC,CAA1B,EAA6BC,IAA7B,EAAmCC,cAAnC,EAAmDC,MAAnD,QAAiE,kBAAjE;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,SAASC,kBAAT,CAA4BC,CAA5B,EAA+BC,UAA/B,EAA2CC,QAA3C,EAAqDC,QAArD,EAA+D;AAC7D,SAAO,CACLC,IAAI,CAACC,KAAL,CAAWJ,UAAU,CAAC,CAAD,CAAV,GAAiB,CAACC,QAAQ,CAAC,CAAD,CAAR,GAAcD,UAAU,CAAC,CAAD,CAAzB,IAAgCD,CAAjC,GAAsCG,QAAjE,CADK,EAELC,IAAI,CAACC,KAAL,CAAWJ,UAAU,CAAC,CAAD,CAAV,GAAiB,CAACC,QAAQ,CAAC,CAAD,CAAR,GAAcD,UAAU,CAAC,CAAD,CAAzB,IAAgCD,CAAjC,GAAsCG,QAAjE,CAFK,EAGLC,IAAI,CAACC,KAAL,CAAWJ,UAAU,CAAC,CAAD,CAAV,GAAiB,CAACC,QAAQ,CAAC,CAAD,CAAR,GAAcD,UAAU,CAAC,CAAD,CAAzB,IAAgCD,CAAjC,GAAsCG,QAAjE,CAHK,CAAP;AAKD;;AAED,IAAMG,yBAAyB,GAAG,cAAlC;;IAEqBC,gB;;;;;AAsEnB,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa,EAAb;AAEA,UAAKC,aAAL,GAAqB,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAArB;AACA,UAAKC,KAAL,GAAa,CAAb;;AACA,UAAKH,aAAL,CAAmBI,WAAnB,CAA+B,gBAAe;AAAA,UAAZD,KAAY,QAAZA,KAAY;AAC5C,YAAKA,KAAL,GAAaA,KAAb;AACD,KAFD;;AANiB;AASlB;;;;WAED,uBAAc;AACZ,aAAOT,IAAI,CAACW,GAAL,CAAS,GAAT,EAAcX,IAAI,CAACY,GAAL,CAAS,CAAT,EAAY,KAAKR,KAAL,CAAWS,IAAvB,CAAd,CAAP;AACD;;;WAED,gCAAuB;AACrB,wBAAmB,KAAKR,KAAxB;AAAA,UAAQS,EAAR,eAAQA,EAAR;AAAA,UAAYC,EAAZ,eAAYA,EAAZ;AACA,wBAAyC,KAAKX,KAA9C;AAAA,UAAQY,IAAR,eAAQA,IAAR;AAAA,UAAcC,KAAd,eAAcA,KAAd;AAAA,UAAqBC,eAArB,eAAqBA,eAArB;AACA,UAAMC,cAAc,GAAG3B,GAAG,GACvB4B,WADoB,CACRN,EADQ,EAEpBO,WAFoB,CAERN,EAFQ,EAGpBO,UAHoB,CAGT,CAHS,EAIpBC,QAJoB,CAIX,IAAIvB,IAAI,CAACwB,EAJE,CAAvB;AAMA,aAAO,oBAAC,IAAD;AAAM,QAAA,CAAC,EAAER,IAAI,GAAG,CAAhB;AAAmB,QAAA,CAAC,EAAEA,IAAI,GAAG,CAA7B;AAAgC,QAAA,CAAC,EAAEG,cAAc,EAAjD;AAAqD,QAAA,IAAI,EAAED,eAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;WAED,6BAAoB;AAAA;;AAClB,yBAA6B,KAAKb,KAAlC;AAAA,UAAQS,EAAR,gBAAQA,EAAR;AAAA,UAAYC,EAAZ,gBAAYA,EAAZ;AAAA,UAAgBhB,QAAhB,gBAAgBA,QAAhB;AACA,yBAAoC,KAAKK,KAAzC;AAAA,UAAQY,IAAR,gBAAQA,IAAR;AAAA,UAAcC,KAAd,gBAAcA,KAAd;AAAA,UAAqBpB,UAArB,gBAAqBA,UAArB;AACA,UAAMgB,IAAI,GAAG,KAAKY,WAAL,EAAb;AAEA,UAAIC,mBAAmB,GAAG1B,IAAI,CAAC2B,KAAL,CAAY,IAAI3B,IAAI,CAACwB,EAAT,IAAeX,IAAI,GAAG,GAAtB,CAAD,IAAiC,IAAIb,IAAI,CAACwB,EAAV,GAAgBzB,QAAhD,CAAX,CAA1B;AACA,UAAI6B,GAAG,GAAK,IAAI5B,IAAI,CAACwB,EAAT,IAAeX,IAAI,GAAG,GAAtB,CAAD,IAAiC,IAAIb,IAAI,CAACwB,EAAV,GAAgBzB,QAAhD,CAAD,GAA8D,CAAxE;;AACA,UAAI6B,GAAG,GAAG,CAAV,EAAa;AACXF,QAAAA,mBAAmB;AACpB;;AACD,UAAIJ,UAAU,GAAG,CAAjB;AACA,UAAIO,SAAS,GAAG,EAAE,IAAI7B,IAAI,CAACwB,EAAX,IAAiBzB,QAAjC;AAEA,cACE,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAC,cAAZ;AAA2B,QAAA,EAAE,EAAEiB,IAAI,GAAG,CAAtC;AAAyC,QAAA,EAAE,EAAEC,KAAK,GAAG,CAArD;AAAwD,QAAA,CAAC,EAAEA,KAAK,GAAG,CAAnE;AAAsE,QAAA,IAAI,EAAEpB,UAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,4BAEKJ,KAAK,CAAC,CAAD,EAAIiC,mBAAmB,GAAG,CAA1B,CAAL,CAAkCI,GAAlC,CAAsC,UAAAlC,CAAC,EAAI;AAC5C,YAAIA,CAAC,KAAK8B,mBAAN,IAA6BE,GAAjC,EAAsC;AACpCC,UAAAA,SAAS,GAAG,CAAC,CAAD,GAAK7B,IAAI,CAACwB,EAAV,IAAgBX,IAAI,GAAG,GAAvB,CAAZ;AACD;;AACD,YAAMkB,UAAU,GAAGvC,GAAG,GACnB4B,WADgB,CACJN,EADI,EAEhBO,WAFgB,CAEJN,EAFI,EAGhBO,UAHgB,CAGLA,UAHK,EAIhBC,QAJgB,CAIPM,SAAS,GAAG,KAJL,CAAnB;AAMA,YAAMG,IAAI,GACR,oBAAC,IAAD;AACE,UAAA,CAAC,EAAE,MAAI,CAAC5B,KAAL,CAAWY,IAAX,GAAkB,CADvB;AAEE,UAAA,CAAC,EAAE,MAAI,CAACZ,KAAL,CAAWY,IAAX,GAAkB,CAFvB;AAGE,UAAA,GAAG,EAAEH,IAAI,GAAGjB,CAHd;AAIE,UAAA,CAAC,EAAEmC,UAAU,EAJf;AAKE,UAAA,IAAI,EAAE,UAAU7B,yBAAV,IAAuCH,QAAQ,GAAGH,CAAX,GAAe,CAAtD,IAA2D,GALnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASA0B,QAAAA,UAAU,GAAGO,SAAb;AACAA,QAAAA,SAAS,IAAK,IAAI7B,IAAI,CAACwB,EAAV,GAAgBzB,QAA7B;AAEA,eAAOiC,IAAP;AACD,OAvBE,CAFL,IA0BE,oBAAC,MAAD;AACE,QAAA,GAAG,EAAC,YADN;AAEE,QAAA,EAAE,EAAE,CAACjB,EAAE,GAAG,CAACA,EAAE,GAAGD,EAAN,IAAY,CAAlB,IAAuBd,IAAI,CAACiC,GAAL,CAAS,IAAIjC,IAAI,CAACwB,EAAT,IAAeX,IAAI,GAAG,GAAtB,IAA6Bb,IAAI,CAACwB,EAA3C,CAAvB,GAAwER,IAAI,GAAG,CAFrF;AAGE,QAAA,EAAE,EAAE,CAACD,EAAE,GAAG,CAACA,EAAE,GAAGD,EAAN,IAAY,CAAlB,IAAuBd,IAAI,CAACkC,GAAL,CAAS,IAAIlC,IAAI,CAACwB,EAAT,IAAeX,IAAI,GAAG,GAAtB,IAA6Bb,IAAI,CAACwB,EAA3C,CAAvB,GAAwER,IAAI,GAAG,CAHrF;AAIE,QAAA,CAAC,EAAEC,KAAK,GAAG,CAJb;AAKE,QAAA,IAAI,EACF,SACAtB,kBAAkB,CAChB,KAAK8B,WAAL,EADgB,EAEhB,KAAKpB,KAAL,CAAWP,QAFK,EAGhB,KAAKO,KAAL,CAAWR,UAHK,EAIhB,GAJgB,CAAlB,CAKEsC,IALF,CAKO,GALP,CADA,GAOA,GAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1BF;AA2CD;;;WAED,kBAAS;AACP,yBAA4C,KAAK/B,KAAjD;AAAA,UAAQY,IAAR,gBAAQA,IAAR;AAAA,UAAcoB,QAAd,gBAAcA,QAAd;AAAA,UAAwBC,KAAxB,gBAAwBA,KAAxB;AAAA,UAA+BC,QAA/B,gBAA+BA,QAA/B;AACA,UAAQC,eAAR,GAA4B,KAAKlC,KAAjC,CAAQkC,eAAR;AACA,UAAM1B,IAAI,GAAG,KAAKY,WAAL,EAAb;AAEA,WAAKe,cAAL,GAAsB,KAAKlC,aAAL,CAAmBmC,WAAnB,CAA+B;AACnDC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,CADuC;AAEnDC,QAAAA,WAAW,EAAE,CAAC,QAAD,EAAW,QAAX;AAFsC,OAA/B,CAAtB;AAIA,UAAMC,sBAAsB,GAAG;AAC7BC,QAAAA,SAAS,EAAE,CAAC;AAAEC,UAAAA,OAAO,EAAE,KAAKN;AAAhB,SAAD;AADkB,OAA/B;AAIA,aACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CAACH,KAAD,EAAQO,sBAAR,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAE5B,IAAZ;AAAkB,QAAA,MAAM,EAAEA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAC,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BuB,eAA9B,CADF,EAEE,oBAAC,CAAD;AAAG,QAAA,QAAQ,EAAE,CAAb;AAAgB,QAAA,OAAO,EAAEvB,IAAI,GAAG,CAAhC;AAAmC,QAAA,OAAO,EAAEA,IAAI,GAAG,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAK+B,oBAAL,EADH,EAEG,KAAKC,iBAAL,EAFH,CAFF,CADF,EAQGV,QAAQ,IAAIA,QAAQ,CAACzB,IAAD,CARvB,CADF;AAYD;;;WAnLD,+BAA6BR,KAA7B,EAAoC;AAAA;;AAClC,UAAQS,EAAR,GAA+CT,KAA/C,CAAQS,EAAR;AAAA,UAAYjB,UAAZ,GAA+CQ,KAA/C,CAAYR,UAAZ;AAAA,UAAwBC,QAAxB,GAA+CO,KAA/C,CAAwBP,QAAxB;AAAA,UAAkCC,QAAlC,GAA+CM,KAA/C,CAAkCN,QAAlC;AACA,UAAIkD,UAAU,GAAGpD,UAAjB;AACA,UAAIqD,SAAS,GAAGvD,kBAAkB,CAAC,CAAD,EAAIE,UAAJ,EAAgBC,QAAhB,EAA0BC,QAA1B,CAAlC;AACA,UAAIuB,UAAU,GAAG,CAAjB;AACA,UAAIO,SAAS,GAAI,IAAI7B,IAAI,CAACwB,EAAV,GAAgBzB,QAAhC;AAEA,aAAON,KAAK,CAAC,CAAD,EAAIM,QAAQ,GAAG,CAAf,CAAL,CAAuB+B,GAAvB,CAA2B,UAAAlC,CAAC,EAAI;AACrC,YAAMuD,cAAc,GAClB,oBAAC,cAAD;AACE,UAAA,EAAE,EAAEjD,yBAAyB,GAAGN,CADlC;AAEE,UAAA,GAAG,EAAEM,yBAAyB,GAAGN,CAFnC;AAGE,UAAA,EAAE,EAAEkB,EAAE,GAAGd,IAAI,CAACiC,GAAL,CAASX,UAAT,CAHX;AAIE,UAAA,EAAE,EAAE,CAACR,EAAD,GAAMd,IAAI,CAACkC,GAAL,CAASZ,UAAT,CAJZ;AAKE,UAAA,EAAE,EAAER,EAAE,GAAGd,IAAI,CAACiC,GAAL,CAASJ,SAAT,CALX;AAME,UAAA,EAAE,EAAE,CAACf,EAAD,GAAMd,IAAI,CAACkC,GAAL,CAASL,SAAT,CANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQE,oBAAC,IAAD;AAAM,UAAA,MAAM,EAAC,GAAb;AAAiB,UAAA,SAAS,EAAE,SAASoB,UAAU,CAACd,IAAX,CAAgB,GAAhB,CAAT,GAAgC,GAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UARF,EASE,oBAAC,IAAD;AAAM,UAAA,MAAM,EAAC,GAAb;AAAiB,UAAA,SAAS,EAAE,SAASe,SAAS,CAACf,IAAV,CAAe,GAAf,CAAT,GAA+B,GAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF,CADF;AAaAc,QAAAA,UAAU,GAAGC,SAAb;AACAA,QAAAA,SAAS,GAAGvD,kBAAkB,CAACC,CAAC,GAAG,CAAL,EAAQC,UAAR,EAAoBC,QAApB,EAA8BC,QAA9B,CAA9B;AACAuB,QAAAA,UAAU,GAAGO,SAAb;AACAA,QAAAA,SAAS,IAAK,IAAI7B,IAAI,CAACwB,EAAV,GAAgBzB,QAA7B;AAEA,eAAOoD,cAAP;AACD,OApBM,CAAP;AAqBD;;;WAED,kCAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AACpD,UAAQpC,KAAR,GAAwDmC,SAAxD,CAAQnC,KAAR;AAAA,UAAeD,IAAf,GAAwDoC,SAAxD,CAAepC,IAAf;AAAA,UAAqBnB,UAArB,GAAwDuD,SAAxD,CAAqBvD,UAArB;AAAA,UAAiCC,QAAjC,GAAwDsD,SAAxD,CAAiCtD,QAAjC;AAAA,UAA2CC,QAA3C,GAAwDqD,SAAxD,CAA2CrD,QAA3C;AACA,UAAIuD,SAAS,GAAG,EAAhB;;AAEA,UAAIvD,QAAQ,KAAKsD,SAAS,CAACtD,QAA3B,EAAqC;AACnCuD,QAAAA,SAAS,CAACvD,QAAV,GAAqBA,QAArB;AACD;;AAED,UAAIkB,KAAK,KAAKoC,SAAS,CAACpC,KAApB,IAA6BD,IAAI,KAAKqC,SAAS,CAACrC,IAApD,EAA0D;AACxD,YAAMD,EAAE,GAAGC,IAAI,GAAG,CAAlB;AACAsC,QAAAA,SAAS,mCACJA,SADI;AAEPxC,UAAAA,EAAE,EAAEC,EAAE,GAAGE,KAFF;AAGPF,UAAAA,EAAE,EAAFA,EAHO;AAIPE,UAAAA,KAAK,EAALA,KAJO;AAKPD,UAAAA,IAAI,EAAJA;AALO,UAAT;AAOD;;AAED,UAAInB,UAAU,KAAKwD,SAAS,CAACE,gBAAzB,IAA6CzD,QAAQ,KAAKuD,SAAS,CAACG,cAAxE,EAAwF;AAEtFF,QAAAA,SAAS,mCACJA,SADI;AAEPC,UAAAA,gBAAgB,EAAE1D,UAFX;AAGP2D,UAAAA,cAAc,EAAE1D,QAHT;AAIPD,UAAAA,UAAU,EAAEH,OAAO,CAAC+D,GAAR,CAAYC,GAAZ,CAAgB5D,QAAhB,CAJL;AAKPA,UAAAA,QAAQ,EAAEJ,OAAO,CAAC+D,GAAR,CAAYC,GAAZ,CAAgB7D,UAAhB;AALH,UAAT;AAOD;;AAED,UAAM8D,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYL,SAAZ,CAAb;;AAEA,UAAIK,IAAI,CAACE,MAAT,EAAiB;AACf,YAAMC,aAAa,mCAAQT,SAAR,GAAsBC,SAAtB,CAAnB;;AACAA,QAAAA,SAAS,CAACf,eAAV,GAA4BpC,gBAAgB,CAAC4D,qBAAjB,CAAuCD,aAAvC,CAA5B;AACD;;AACD,aAAOH,IAAI,CAACE,MAAL,GAAcP,SAAd,GAA0B,IAAjC;AACD;;;;EApE2CxE,S;;SAAzBqB,gB;AAuLrBA,gBAAgB,CAAC6D,SAAjB,GAA6B;AAC3B9C,EAAAA,eAAe,EAAEnC,SAAS,CAACkF,MADA;AAE3B3B,EAAAA,QAAQ,EAAEvD,SAAS,CAACmF,IAFO;AAG3BrD,EAAAA,IAAI,EAAE9B,SAAS,CAACoF,MAAV,CAAiBC,UAHI;AAI3BhC,EAAAA,QAAQ,EAAErD,SAAS,CAACoF,MAJO;AAK3BnD,EAAAA,IAAI,EAAEjC,SAAS,CAACoF,MAAV,CAAiBC,UALI;AAM3B/B,EAAAA,KAAK,EAAErD,aAAa,CAACqD,KANM;AAO3BgC,EAAAA,SAAS,EAAEtF,SAAS,CAACkF,MAPM;AAQ3BhD,EAAAA,KAAK,EAAElC,SAAS,CAACoF,MAAV,CAAiBC,UARG;AAS3BE,EAAAA,OAAO,EAAEvF,SAAS,CAACkF;AATQ,CAA7B;AAYA9D,gBAAgB,CAACoE,YAAjB,GAAgC;AAC9BF,EAAAA,SAAS,EAAE,OADmB;AAE9BnD,EAAAA,eAAe,EAAE,SAFa;AAG9BkB,EAAAA,QAAQ,EAAE,EAHoB;AAI9BkC,EAAAA,OAAO,EAAE;AAJqB,CAAhC","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, ViewPropTypes, Animated } from 'react-native';\r\nimport Svg, { Defs, Stop, G, Path, LinearGradient, Circle } from 'react-native-svg';\r\nimport { arc } from 'd3-shape';\r\nimport range from 'lodash/range';\r\nimport convert from 'color-convert';\r\n\r\nfunction calculateStopColor(i, beginColor, endColor, segments) {\r\n  return [\r\n    Math.round(beginColor[0] + ((endColor[0] - beginColor[0]) * i) / segments),\r\n    Math.round(beginColor[1] + ((endColor[1] - beginColor[1]) * i) / segments),\r\n    Math.round(beginColor[2] + ((endColor[2] - beginColor[2]) * i) / segments),\r\n  ];\r\n}\r\n\r\nconst LINEAR_GRADIENT_PREFIX_ID = 'gradientRing';\r\n\r\nexport default class CircularProgress extends Component {\r\n  static renderLinearGradients(state) {\r\n    const { r1, beginColor, endColor, segments } = state;\r\n    let startColor = beginColor;\r\n    let stopColor = calculateStopColor(1, beginColor, endColor, segments);\r\n    let startAngle = 0;\r\n    let stopAngle = (2 * Math.PI) / segments;\r\n\r\n    return range(1, segments + 1).map(i => {\r\n      const linearGradient = (\r\n        <LinearGradient\r\n          id={LINEAR_GRADIENT_PREFIX_ID + i}\r\n          key={LINEAR_GRADIENT_PREFIX_ID + i}\r\n          x1={r1 * Math.sin(startAngle)}\r\n          y1={-r1 * Math.cos(startAngle)}\r\n          x2={r1 * Math.sin(stopAngle)}\r\n          y2={-r1 * Math.cos(stopAngle)}\r\n        >\r\n          <Stop offset=\"0\" stopColor={'rgb(' + startColor.join(',') + ')'} />\r\n          <Stop offset=\"1\" stopColor={'rgb(' + stopColor.join(',') + ')'} />\r\n        </LinearGradient>\r\n      );\r\n      startColor = stopColor;\r\n      stopColor = calculateStopColor(i + 1, beginColor, endColor, segments);\r\n      startAngle = stopAngle;\r\n      stopAngle += (2 * Math.PI) / segments;\r\n\r\n      return linearGradient;\r\n    });\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const { width, size, beginColor, endColor, segments } = nextProps;\r\n    let nextState = {};\r\n\r\n    if (segments !== prevState.segments) {\r\n      nextState.segments = segments;\r\n    }\r\n\r\n    if (width !== prevState.width || size !== prevState.size) {\r\n      const r2 = size / 2;\r\n      nextState = {\r\n        ...nextState,\r\n        r1: r2 - width,\r\n        r2,\r\n        width,\r\n        size,\r\n      };\r\n    }\r\n\r\n    if (beginColor !== prevState.beginColorCached || endColor !== prevState.endColorCached) {\r\n      // CHANGE COLOR ORDER\r\n      nextState = {\r\n        ...nextState,\r\n        beginColorCached: beginColor,\r\n        endColorCached: endColor,\r\n        beginColor: convert.hex.rgb(endColor),\r\n        endColor: convert.hex.rgb(beginColor),\r\n      };\r\n    }\r\n\r\n    const keys = Object.keys(nextState);\r\n\r\n    if (keys.length) {\r\n      const combinedState = { ...prevState, ...nextState };\r\n      nextState.linearGradients = CircularProgress.renderLinearGradients(combinedState);\r\n    }\r\n    return keys.length ? nextState : null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.animatedValue = new Animated.Value(0);\r\n    this.value = 0;\r\n    this.animatedValue.addListener(({ value }) => {\r\n      this.value = value;\r\n    });\r\n  }\r\n\r\n  extractFill() {\r\n    return Math.min(100, Math.max(0, this.props.fill));\r\n  }\r\n\r\n  renderBackgroundPath() {\r\n    const { r1, r2 } = this.state;\r\n    const { size, width, backgroundColor } = this.props;\r\n    const backgroundPath = arc()\r\n      .innerRadius(r1)\r\n      .outerRadius(r2)\r\n      .startAngle(0)\r\n      .endAngle(2 * Math.PI);\r\n\r\n    return <Path x={size / 2} y={size / 2} d={backgroundPath()} fill={backgroundColor} />;\r\n  }\r\n\r\n  renderCirclePaths() {\r\n    const { r1, r2, segments } = this.state;\r\n    const { size, width, beginColor } = this.props;\r\n    const fill = this.extractFill();\r\n\r\n    let numberOfPathsToDraw = Math.floor((2 * Math.PI * (fill / 100)) / ((2 * Math.PI) / segments));\r\n    let rem = ((2 * Math.PI * (fill / 100)) / ((2 * Math.PI) / segments)) % 1;\r\n    if (rem > 0) {\r\n      numberOfPathsToDraw++;\r\n    }\r\n    let startAngle = 0;\r\n    let stopAngle = -(2 * Math.PI) / segments;\r\n\r\n    return [\r\n      <Circle key=\"start_circle\" cx={size / 2} cy={width / 2} r={width / 2} fill={beginColor} />,\r\n      ...range(1, numberOfPathsToDraw + 1).map(i => {\r\n        if (i === numberOfPathsToDraw && rem) {\r\n          stopAngle = -2 * Math.PI * (fill / 100);\r\n        }\r\n        const circlePath = arc()\r\n          .innerRadius(r1)\r\n          .outerRadius(r2)\r\n          .startAngle(startAngle)\r\n          .endAngle(stopAngle - 0.005);\r\n\r\n        const path = (\r\n          <Path\r\n            x={this.props.size / 2}\r\n            y={this.props.size / 2}\r\n            key={fill + i}\r\n            d={circlePath()}\r\n            fill={'url(#' + LINEAR_GRADIENT_PREFIX_ID + (segments - i + 1) + ')'}\r\n          />\r\n        );\r\n        startAngle = stopAngle;\r\n        stopAngle -= (2 * Math.PI) / segments;\r\n\r\n        return path;\r\n      }),\r\n      <Circle\r\n        key=\"end_circle\"\r\n        cx={(r2 - (r2 - r1) / 2) * Math.sin(2 * Math.PI * (fill / 100) - Math.PI) + size / 2}\r\n        cy={(r2 - (r2 - r1) / 2) * Math.cos(2 * Math.PI * (fill / 100) - Math.PI) + size / 2}\r\n        r={width / 2}\r\n        fill={\r\n          'rgb(' +\r\n          calculateStopColor(\r\n            this.extractFill(),\r\n            this.state.endColor,\r\n            this.state.beginColor,\r\n            100\r\n          ).join(',') +\r\n          ')'\r\n        }\r\n      />,\r\n    ];\r\n  }\r\n\r\n  render() {\r\n    const { size, rotation, style, children } = this.props;\r\n    const { linearGradients } = this.state;\r\n    const fill = this.extractFill();\r\n\r\n    this.SetInterpolate = this.animatedValue.interpolate({\r\n      inputRange: [0, 180],\r\n      outputRange: ['180deg', '360deg'],\r\n    });\r\n    const Rotate_Y_AnimatedStyle = {\r\n      transform: [{ rotateY: this.SetInterpolate }],\r\n    };\r\n\r\n    return (\r\n      <Animated.View style={[style, Rotate_Y_AnimatedStyle]}>\r\n        <Svg width={size} height={size}>\r\n          <Defs key=\"linear_gradients\">{linearGradients}</Defs>\r\n          <G rotation={0} originX={size / 2} originY={size / 2}>\r\n            {this.renderBackgroundPath()}\r\n            {this.renderCirclePaths()}\r\n          </G>\r\n        </Svg>\r\n        {children && children(fill)}\r\n      </Animated.View>\r\n    );\r\n  }\r\n}\r\n\r\nCircularProgress.propTypes = {\r\n  backgroundColor: PropTypes.string,\r\n  children: PropTypes.func,\r\n  fill: PropTypes.number.isRequired,\r\n  rotation: PropTypes.number,\r\n  size: PropTypes.number.isRequired,\r\n  style: ViewPropTypes.style,\r\n  tintColor: PropTypes.string,\r\n  width: PropTypes.number.isRequired,\r\n  linecap: PropTypes.string,\r\n};\r\n\r\nCircularProgress.defaultProps = {\r\n  tintColor: 'black',\r\n  backgroundColor: '#e4e4e4',\r\n  rotation: 90,\r\n  linecap: 'butt',\r\n};\r\n"]},"metadata":{},"sourceType":"module"}