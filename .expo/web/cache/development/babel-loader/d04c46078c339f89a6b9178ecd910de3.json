{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nexport var AUTHENTICATE = \"AUTHENTICATE\";\nexport var LOGOUT = \"LOGOUT\";\nvar timer;\nexport var authenticate = function authenticate(userId, token, expiryTime) {\n  return function (dispatch) {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token\n    });\n  };\n};\nexport var signup = function signup(name, email, mobileNumber, password, confirmPassword) {\n  return function _callee(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCpQbjXMSb_MTPw0_Y7h_A4jqwO-oyUqYg\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                name: name,\n                email: email,\n                phoneNumber: mobileNumber,\n                password: password,\n                confirmPassword: confirmPassword,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context.sent;\n            errorId = errorResData.error.message;\n            message = \"Authentication failed!\";\n\n            if (errorId === \"EMAIL_EXISTS\") {\n              message = \"This email exists already!\";\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCpQbjXMSb_MTPw0_Y7h_A4jqwO-oyUqYg\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context2.sent;\n            console.log(errorResData);\n            errorId = errorResData.error.message;\n            message = \"Authentication failed!\";\n\n            if (errorId === \"EMAIL_NOT_FOUND\") {\n              message = \"This email could not be found!\";\n            } else if (errorId === \"INVALID_PASSWORD\") {\n              message = \"This password is not valid!\";\n            }\n\n            throw new Error(message);\n\n          case 12:\n            _context2.next = 14;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 14:\n            resData = _context2.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout() {\n  clearLogoutTimer();\n  AsyncStorage.removeItem(\"userData\");\n  return {\n    type: LOGOUT\n  };\n};\n\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate) {\n  AsyncStorage.setItem(\"userData\", JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString()\n  }));\n};","map":{"version":3,"sources":["/Users/sachi/Desktop/e17-3yp-Smart-Pet-Feeder/MobileApp/store/actions/auth.js"],"names":["AsyncStorage","AUTHENTICATE","LOGOUT","timer","authenticate","userId","token","expiryTime","dispatch","setLogoutTimer","type","signup","name","email","mobileNumber","password","confirmPassword","fetch","method","headers","body","JSON","stringify","phoneNumber","returnSecureToken","response","ok","json","errorResData","errorId","error","message","Error","resData","console","log","localId","idToken","parseInt","expiresIn","expirationDate","Date","getTime","saveDataToStorage","login","logout","clearLogoutTimer","removeItem","clearTimeout","expirationTime","setTimeout","setItem","expiryDate","toISOString"],"mappings":"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","sourcesContent":["/*\n  We can use dispatch func\n    - To dispatch reducer action  (Using {} brackets)\n    - To execute any function after some async operation\n */\n\nimport { AsyncStorage } from \"react-native\";\n\nexport const AUTHENTICATE = \"AUTHENTICATE\";\n\n// Logout action identifier\nexport const LOGOUT = \"LOGOUT\";\n\nlet timer; // to hold timer func\n\nexport const authenticate = (userId, token, expiryTime) => {\n  // Dispatching 2 actions here. (Can we implement this without dispatch ? )\n  return (dispatch) => {\n    // Dispatch setLogoutTimer with expiry time\n    dispatch(setLogoutTimer(expiryTime));\n    // Dispatch AUTHENTICATE action (To store token and id in the redux store)\n    dispatch({ type: AUTHENTICATE, userId: userId, token: token });\n  };\n};\n\nexport const signup = (\n  name,\n  email,\n  mobileNumber,\n  password,\n  confirmPassword\n) => {\n  return async (dispatch) => {\n    const response = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCpQbjXMSb_MTPw0_Y7h_A4jqwO-oyUqYg\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name: name,\n          email: email,\n          phoneNumber: mobileNumber,\n          password: password,\n          confirmPassword: confirmPassword,\n          returnSecureToken: true,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorResData = await response.json();\n      const errorId = errorResData.error.message;\n      let message = \"Authentication failed!\";\n      if (errorId === \"EMAIL_EXISTS\") {\n        message = \"This email exists already!\";\n      }\n      throw new Error(message);\n    }\n\n    const resData = await response.json();\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.localId,\n        resData.idToken,\n        parseInt(resData.expiresIn) * 1000 // pass expiry time in ms when signup\n      )\n    );\n\n    // This is for saving expiry time (When auto login)\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expiresIn) * 1000\n    );\n    saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n  };\n};\n\nexport const login = (email, password) => {\n  return async (dispatch) => {\n    const response = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCpQbjXMSb_MTPw0_Y7h_A4jqwO-oyUqYg\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password,\n          returnSecureToken: true,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorResData = await response.json();\n      console.log(errorResData);\n      const errorId = errorResData.error.message;\n      let message = \"Authentication failed!\";\n      if (errorId === \"EMAIL_NOT_FOUND\") {\n        message = \"This email could not be found!\";\n      } else if (errorId === \"INVALID_PASSWORD\") {\n        message = \"This password is not valid!\";\n      }\n      throw new Error(message);\n    }\n\n    const resData = await response.json();\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.localId,\n        resData.idToken,\n        parseInt(resData.expiresIn) * 1000 // pass expiry time when signup\n      )\n    );\n    // This is for saving expiry time (When auto login)\n\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expiresIn) * 1000\n    );\n    saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n  };\n};\n\n// Logout func\nexport const logout = () => {\n  // clear log out timer\n  clearLogoutTimer();\n  // Remove userData from mobile storage\n  AsyncStorage.removeItem(\"userData\");\n\n  // Dispatch LOGOUT action (No async operations, so can dispatch actions directly)\n  return { type: LOGOUT };\n};\n\nconst clearLogoutTimer = () => {\n  // If timer exists, clear it\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\n// Setting logout timer\nconst setLogoutTimer = (expirationTime) => {\n  // This is a async operation (need dispatch callback)\n  return (dispatch) => {\n    timer = setTimeout(() => {\n      dispatch(logout()); // dispatch logout() func after expiration time\n    }, expirationTime);\n  };\n};\n\nconst saveDataToStorage = (token, userId, expirationDate) => {\n  AsyncStorage.setItem(\n    \"userData\",\n    JSON.stringify({\n      token: token,\n      userId: userId,\n      expiryDate: expirationDate.toISOString(),\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}