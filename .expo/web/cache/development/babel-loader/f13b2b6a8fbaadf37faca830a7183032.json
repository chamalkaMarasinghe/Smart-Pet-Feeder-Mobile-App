{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sachi/Desktop/Mobile App/App.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport { LogBox } from \"react-native-web/dist/index\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { Asset } from \"expo-asset\";\nimport AppLoading from \"expo-app-loading\";\nimport Loading from \"./application/components/AppLoading\";\nimport AdmobBanner from \"./application/components/AdmobBanner\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Provider as PaperProvider, DefaultTheme as DefaultThemePaper } from \"react-native-paper\";\nimport { NavigationContainer, DefaultTheme as DefaultThemeNav } from \"@react-navigation/native\";\nimport Navigation from \"./application/navigation/Navigation\";\nimport ColorsApp from \"./application/config/ColorsApp\";\nimport ConfigApp from \"./application/config/ConfigApp\";\nimport MaterialIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport UserContext from \"./application/context/UserContext\";\nimport AdmobConfig from \"./application/config/AdmobConfig\";\nDefaultThemePaper.colors.primary = ColorsApp.PRIMARY;\nDefaultThemePaper.colors.placeholder = \"#959595\";\nDefaultThemePaper.colors.accent = ColorsApp.PRIMARY;\nDefaultThemeNav.colors.background = ColorsApp.BACKGROUND;\nDefaultThemeNav.colors.card = ColorsApp.HEADER;\nDefaultThemePaper.roundness = 6;\nLogBox.ignoreAllLogs();\n\nvar cacheImages = function cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n};\n\nvar loadAssetsAsync = function loadAssetsAsync() {\n  var imageAssets;\n  return _regeneratorRuntime.async(function loadAssetsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          imageAssets = cacheImages([require(\"./assets/header.jpg\"), require(\"./assets/logo.png\"), require(\"./assets/logo-white.png\")]);\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Promise.all(_toConsumableArray(imageAssets)));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar App = function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setIsReady = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loaded = _useState4[0],\n      setLoaded = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      user = _useState6[0],\n      setUser = _useState6[1];\n\n  var updateValue = function updateValue(user) {\n    setUser(user);\n  };\n\n  if (!loaded) {\n    return React.createElement(AppLoading, {\n      startAsync: loadAssetsAsync,\n      onFinish: function onFinish() {\n        return setLoaded(true);\n      },\n      onError: console.warn,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    });\n  } else {\n    return React.createElement(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, React.createElement(StatusBar, {\n      translucent: true,\n      backgroundColor: \"transparent\",\n      barStyle: \"light-content\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }), React.createElement(NavigationContainer, {\n      theme: DefaultThemeNav,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, React.createElement(Navigation, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }), React.createElement(AdmobBanner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    })));\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/sachi/Desktop/Mobile App/App.js"],"names":["React","useState","useEffect","LogBox","Asset","AppLoading","Loading","AdmobBanner","AsyncStorage","Provider","PaperProvider","DefaultTheme","DefaultThemePaper","NavigationContainer","DefaultThemeNav","Navigation","ColorsApp","ConfigApp","MaterialIcons","UserContext","AdmobConfig","colors","primary","PRIMARY","placeholder","accent","background","BACKGROUND","card","HEADER","roundness","ignoreAllLogs","cacheImages","images","map","image","Image","prefetch","fromModule","downloadAsync","loadAssetsAsync","imageAssets","require","Promise","all","App","isReady","setIsReady","loaded","setLoaded","user","setUser","updateValue","console","warn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { LogBox, StatusBar } from \"react-native\";\nimport { Asset } from \"expo-asset\";\nimport AppLoading from \"expo-app-loading\";\nimport Loading from \"./application/components/AppLoading\";\nimport AdmobBanner from \"./application/components/AdmobBanner\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport {\n  Provider as PaperProvider,\n  DefaultTheme as DefaultThemePaper,\n} from \"react-native-paper\";\nimport {\n  NavigationContainer,\n  DefaultTheme as DefaultThemeNav,\n} from \"@react-navigation/native\";\nimport Navigation from \"./application/navigation/Navigation\";\nimport ColorsApp from \"./application/config/ColorsApp\";\nimport ConfigApp from \"./application/config/ConfigApp\";\nimport MaterialIcons from \"react-native-vector-icons/MaterialCommunityIcons\";\n// import {\n//   checkUserApi,\n//   getUserData,\n//   setUserData,\n//   getLogged,\n//   setLogged,\n// } from \"./application/config/DataApp\";\nimport UserContext from \"./application/context/UserContext\";\nimport AdmobConfig from \"./application/config/AdmobConfig\";\n//import moment from \"moment\";\n//import 'moment/locale/es';\n\nDefaultThemePaper.colors.primary = ColorsApp.PRIMARY;\nDefaultThemePaper.colors.placeholder = \"#959595\";\nDefaultThemePaper.colors.accent = ColorsApp.PRIMARY;\nDefaultThemeNav.colors.background = ColorsApp.BACKGROUND;\nDefaultThemeNav.colors.card = ColorsApp.HEADER;\nDefaultThemePaper.roundness = 6;\n\nLogBox.ignoreAllLogs();\n\nconst cacheImages = (images) => {\n  return images.map((image) => {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n};\n\nconst loadAssetsAsync = async () => {\n  const imageAssets = cacheImages([\n    require(\"./assets/header.jpg\"),\n    require(\"./assets/logo.png\"),\n    require(\"./assets/logo-white.png\"),\n  ]);\n\n  await Promise.all([...imageAssets]);\n};\n\nconst App = () => {\n  const [isReady, setIsReady] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [user, setUser] = useState([]);\n\n  const updateValue = (user) => {\n    setUser(user);\n  };\n\n  // const checkUser = async () => {\n  //   try {\n  //     await getUserData().then((resp) => {\n  //       if (resp.length >= 1 && resp != null) {\n  //         const email = resp[0][\"user_email\"];\n  //\n  //         setUser(resp[0]);\n  //         updateValue(resp[0]);\n  //\n  //         checkUserApi(email).then((response) => {\n  //           if (response != \"error\") {\n  //             setUserData(response).then((response) => {\n  //               setLogged(true);\n  //             });\n  //           } else if (response === \"error\") {\n  //             setLogged(false);\n  //           }\n  //         });\n  //       } else {\n  //         setLogged(false);\n  //       }\n  //     });\n  //   } catch (error) {\n  //     setLogged(false);\n  //     // console.log(\"Error\", error);\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   //moment.locale(\"es\");\n  //\n  //   LogBox.ignoreLogs([\"VirtualizedLists should never be nested\"]);\n  //\n  //   checkUser();\n  //   setTimeout(() => {\n  //     setLoaded(true);\n  //   }, 1500);\n  //\n  //   AdmobConfig.ShowInterstitial();\n  // }, []);\n\n  // if (!isReady) {\n  //   return (\n  //     <AppLoading\n  //       startAsync={loadAssetsAsync}\n  //       onFinish={() => setIsReady(true)}\n  //       onError={console.warn}\n  //     />\n  //   );\n  // }\n\n  if (!loaded) {\n    return (\n      <AppLoading\n        startAsync={loadAssetsAsync}\n        onFinish={() => setLoaded(true)}\n        onError={console.warn}\n      />\n    );\n  } else {\n    return (\n      // <UserContext.Provider value={{ user, updateValue }}>\n      // <PaperProvider\n      //   theme={DefaultThemePaper}\n      //   settings={{ icon: (props) => <MaterialIcons {...props} /> }}\n      // >\n      <React.Fragment>\n        <StatusBar\n          translucent\n          backgroundColor=\"transparent\"\n          barStyle={\"light-content\"}\n        />\n        <NavigationContainer theme={DefaultThemeNav}>\n          <Navigation />\n          <AdmobBanner />\n        </NavigationContainer>\n      </React.Fragment>\n\n      // </PaperProvider>\n      //{\" \"}\n      // </UserContext.Provider>\n    );\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}